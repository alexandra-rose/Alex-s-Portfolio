---
title: "Final-assignment"
format: html
editor: visual
---

## 

```{r}
library(igraph)
library(dplyr)
library(ggplot2)
library(purrr)

```

```{r}
edges <- read.csv("edges.csv")

nodes <- read.csv("nodes.csv")

g <- graph_from_data_frame(edges, vertices = nodes, directed = FALSE)
```

Objective: study the problema of spreading on a social network

2\. Intro

Network with the number of nodes should be larger than 1000 and it should have \> 5000 links.

```{r}
vcount(g) #nodes
ecount(g) #edges
```

3\. Steps: We want to simulate the propagation of information on this network using the SIR model assuming that an infected person can transmit the information with probability βto a susceptible person on the network.

**a) Find the theoretical epidemic threshold for your network for the information to reach a significant number of nodes.**

To find the theoretical epidemic threshold, $\beta_c$, for the network:

$\beta_c = \mu \frac{\langle k^2 \rangle}{\langle k \rangle}$

Where:

-   $\mu$ is the recovery rate.

-   $\langle k \rangle$ is the average degree of the network.

-   $\langle k^2 \rangle$ is the average of the square of the degrees.

Calculate $\beta_c$, using the degree statistics of the network.

```{r}
# Calculate theoretical epidemic threshold
mu <- 0.1
average_degree <- mean(degree(g))
average_degree_square <- mean(degree(g)^2)
beta_c <- mu * average_degree / average_degree_square

cat("The theoretical epidemic threshold (beta_c) is:", beta_c, "\n")
```

The theoretical epidemic threshold (beta_c) is: 0.001340159

**b) Assuming that randomly-selected 1% of the nodes of your network knows about the information, simulate the SIR model below and above that threshold and plot the number of infected people as a function of β.**

To simulate the SIR model and plot the results:

1.  **Below and Above Threshold:** Simulate for $\beta < \beta_c$ and $\beta < \beta_c*$

2.  **Randomly Select 1% Seeds:** Initialize the infection with 1% randomly selected nodes.

Use the sim_sir function provided in the document and plot the number of infected people over time for different $\beta$ values.

```{r}
# Function to simulate the SIR model
sim_sir <- function(g, beta, mu, seeds) {
  state <- rep(0, vcount(g))  # Initial state of all nodes
  state[seeds] <- 1           # Infect the seeds
  t <- 0                      # Initialize time
  table <- data.frame(t = 0, inf = seeds)  # Record initial infections

  while (sum(state == 1) > 0) {
    t <- t + 1
    infected <- which(state == 1)
    state[infected] <- ifelse(runif(length(infected)) < mu, 2, 1)  # I -> R
    infected <- which(state == 1)
    susceptible <- which(state == 0)
    contacts <- as.numeric(unlist(adjacent_vertices(g, infected)))
    contacts <- contacts[contacts %in% susceptible]
    new_infected <- contacts[runif(length(contacts)) < beta]
    if (length(new_infected) > 0) {
      state[new_infected] <- 1
      table <- rbind(table, data.frame(t, inf = new_infected))
    }
  }
  return(table)
}

```

```{r}
# Function to simulate SIR model for multiple beta values
simulate_sir_multiple <- function(g, beta_values, mu, seeds_ratio) {
  results <- map_dfr(beta_values, function(beta) {
    seeds <- sample(1:vcount(g), vcount(g) * seeds_ratio)
    realization <- sim_sir(g, beta, mu, seeds)
    data.frame(beta, ninf = length(unique(realization$inf)))
  })
  return(results)
}

# Define beta values for simulation below and above the threshold
beta_values_below <- seq(0, beta_c, length.out = 5)
beta_values_above <- seq(beta_c, beta_c * 2, length.out = 5)
beta_values <- c(beta_values_below, beta_values_above)

# Simulate for beta values both below and above the threshold
results <- simulate_sir_multiple(g, beta_values, mu, 0.01)
```

```{r}
ggplot(results, aes(x = beta, y = ninf)) +
  geom_point() +
  geom_vline(xintercept = beta_c, linetype = 2, color = "red") +
  labs(
    title = "Number of Infected Nodes vs. Transmission Rate (β)",
    x = expression(beta),
    y = "Number of Infected Nodes",
    caption = expression(beta[c] == mu * frac(mean(k^2), mean(k)))
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, max(beta_values), by = 0.01))

```

**c) Choose a β above βc\*. Using centrality, communities or any other metric, find a better set of 1% of seeds in the network so we get more infected people than the random case. Measure the difference of your choice with the random case as:**

**- The difference in the total number of infected people**

**- The difference in the time of the peak of infection (when most infections happen).**

1.  **Above Threshold Simulation:** Choose $\beta < \beta_c*$

2.  **Centrality-Based Seed Selection**: Use centrality metrics (e.g., degree, closeness) to select the top 1% nodes as seeds.

3.  **Measure Differences**: Total number of infected people. Time of peak infection. Compare the optimized seed selection with the random case.

```{r}
# Choose a beta above the threshold
beta <- beta_c * 1.5

# Function to simulate the SIR model
sim_sir <- function(g, beta, mu, seeds) {
  state <- rep(0, vcount(g))  # Initial state of all nodes
  state[seeds] <- 1           # Infect the seeds
  t <- 0                      # Initialize time
  table <- data.frame(t = 0, inf = seeds)  # Record initial infections

  while (sum(state == 1) > 0) {
    t <- t + 1
    infected <- which(state == 1)
    state[infected] <- ifelse(runif(length(infected)) < mu, 2, 1)  # I -> R
    infected <- which(state == 1)
    susceptible <- which(state == 0)
    contacts <- as.numeric(unlist(adjacent_vertices(g, infected)))
    contacts <- contacts[contacts %in% susceptible]
    if (length(contacts) > 0) {
      new_infected <- contacts[runif(length(contacts)) < beta]
      if (length(new_infected) > 0) {
        state[new_infected] <- 1
        table <- rbind(table, data.frame(t, inf = new_infected))
      }
    }
  }
  return(table)
}

```

```{r}
# Function to get the time of the peak infection
time_of_peak_infection <- function(realization) {
  peak_time <- realization %>%
    group_by(t) %>%
    summarize(ninf = n()) %>%
    filter(ninf == max(ninf)) %>%
    pull(t)
  return(peak_time)
}

```

```{r}
# Random seed selection (1% of the nodes)
set.seed(42)  # For reproducibility
random_seeds <- sample(1:vcount(g), vcount(g) * 0.01)

# Centrality-based seed selection (1% of the nodes with highest degree)
degree_centrality <- degree(g)
central_seeds <- order(degree_centrality, decreasing = TRUE)[1:(vcount(g) * 0.01)]
```

```{r}
# Simulate the SIR model for random seeds
random_realization <- sim_sir(g, beta, mu, random_seeds)
random_infected_count <- length(unique(random_realization$inf))
random_peak_time <- time_of_peak_infection(random_realization)

# Simulate the SIR model for centrality-based seeds
central_realization <- sim_sir(g, beta, mu, central_seeds)
central_infected_count <- length(unique(central_realization$inf))
central_peak_time <- time_of_peak_infection(central_realization)

# Calculate the differences
difference_in_infected <- central_infected_count - random_infected_count
difference_in_peak_time <- central_peak_time - random_peak_time

# Print the results
cat("Difference in the total number of infected people:", difference_in_infected, "\n")
cat("Difference in the time of the peak of infection:", difference_in_peak_time, "\n")

```

```{r}
# Plot the infection curves
random_curve <- random_realization %>%
  group_by(t) %>%
  summarize(ninf = n()) %>%
  mutate(type = "Random")

central_curve <- central_realization %>%
  group_by(t) %>%
  summarize(ninf = n()) %>%
  mutate(type = "Centrality-based")

infection_curves <- bind_rows(random_curve, central_curve)

ggplot(infection_curves, aes(x = t, y = ninf, color = type)) +
  geom_line() +
  labs(
    title = "Infection Curves for Random and Centrality-based Seeds",
    x = "Time",
    y = "Number of Infected Nodes"
  ) +
  theme_minimal()
```

**d) Suppose now that you can convince 5% of people in the network not to spread that information at all.**

**- Choose those 5% randomly in the network. Simulate the SIR model above using 1% of the remaining nodes as seeds. Choose those seeds randomly.**

```{r}
# Remove 5% of nodes randomly
set.seed(42)  # For reproducibility
total_nodes <- vcount(g)
num_to_remove <- round(total_nodes * 0.05)
removed_nodes <- sample(1:total_nodes, num_to_remove)
g_reduced <- delete_vertices(g, removed_nodes)

# Random seed selection (1% of the remaining nodes)
remaining_nodes <- vcount(g_reduced)
num_seeds <- round(remaining_nodes * 0.01)
random_seeds <- sample(1:remaining_nodes, num_seeds)
```

```{r}
# Simulate the SIR model for random seeds on the reduced graph
random_realization <- sim_sir(g_reduced, beta, mu, random_seeds)
random_infected_count <- length(unique(random_realization$inf))
random_peak_time <- time_of_peak_infection(random_realization)

# Print the results
cat("Total number of infected people:", random_infected_count, "\n")
cat("Time of the peak of infection:", random_peak_time, "\n")

```

```{r}
# Plot the infection curve
random_curve <- random_realization %>%
  group_by(t) %>%
  summarize(ninf = n())

ggplot(random_curve, aes(x = t, y = ninf)) +
  geom_line(color = "blue") +
  labs(
    title = "Infection Curve with 5% Nodes Removed and Random Seeds",
    x = "Time",
    y = "Number of Infected Nodes"
  ) +
  theme_minimal()
```

**- Choose those 5% according to their centrality. Simulate the SIR model above using 1% of the remaining nodes as seeds. Choose those seeds randomly.**

```{r}
# Remove 5% of nodes based on their centrality (degree centrality)
degree_centrality <- degree(g)
num_to_remove <- round(vcount(g) * 0.05)
removed_nodes_centrality <- order(degree_centrality, decreasing = TRUE)[1:num_to_remove]
g_reduced_centrality <- delete_vertices(g, removed_nodes_centrality)

# Random seed selection (1% of the remaining nodes)
set.seed(42)  # For reproducibility
remaining_nodes_centrality <- vcount(g_reduced_centrality)
num_seeds_centrality <- round(remaining_nodes_centrality * 0.01)
random_seeds_centrality <- sample(1:remaining_nodes_centrality, num_seeds_centrality)

```

```{r}
# Simulate the SIR model for random seeds on the reduced graph
centrality_realization <- sim_sir(g_reduced_centrality, beta, mu, random_seeds_centrality)
centrality_infected_count <- length(unique(centrality_realization$inf))
centrality_peak_time <- time_of_peak_infection(centrality_realization)

# Print the results
cat("Total number of infected people (centrality-based removal):", centrality_infected_count, "\n")
cat("Time of the peak of infection (centrality-based removal):", centrality_peak_time, "\n")

```

```{r}
# Plot the infection curve
centrality_curve <- centrality_realization %>%
  group_by(t) %>%
  summarize(ninf = n())

ggplot(centrality_curve, aes(x = t, y = ninf)) +
  geom_line(color = "red") +
  labs(
    title = "Infection Curve with 5% Nodes Removed by Centrality and Random Seeds",
    x = "Time",
    y = "Number of Infected Nodes"
  ) +
  theme_minimal()
```

**- Measure the difference between both cases as you did in part c).**
```{r}
difference_in_infected_removal <- random_infected_count - centrality_infected_count
cat("Difference in the total number of infected people (random vs centrality-based removal):", difference_in_infected_removal, "\n")

difference_in_peak_time_removal <- random_peak_time - centrality_peak_time
cat("Difference in the time of the peak of infection (random vs centrality-based removal):", difference_in_peak_time_removal, "\n")

```


**e) Comment on the relationship between the findings in part c) and d) using the same type of centrality for the 1% in part c) and 5% in part d)**.
In part c, we found that selecting seeds based on their centrality (specifically, degree centrality) resulted in a higher total number of infected people and an earlier peak of infection compared to the random selection of seeds.
This demonstrates that nodes with high centrality play a significant role in spreading information (or infection) through the network. By targeting these nodes as seeds, we can maximize the spread and accelerate the infection process.

In part d, we investigated the effect of removing 5% of nodes randomly versus removing 5% of nodes with the highest degree centrality before selecting seeds randomly and simulating the SIR model. The results indicated that removing high centrality nodes significantly reduced the total number of infected people and that the peak of infection occurred later when high centrality nodes were removed compared to random removal.
This shows that nodes with high centrality not only facilitate the spread when used as seeds but also are critical points of failure in the network. Removing them has a more substantial impact on reducing the spread of infection.

The centrality-based strategies in both parts c and d highlight the pivotal role of central nodes in network dynamics as in c), using centrality to select seeds enhances the spread, leveraging the influential position of these nodes and in d), removing central nodes inhibits the spread, as these nodes are crucial for maintaining network connectivity and facilitating rapid dissemination.

Both parts emphasize the same idea: nodes with high centrality are key to controlling the spread of information or infection in a network. Whether these nodes are used as seeds or removed from the network, their influence is evident in the resulting infection dynamics. Central nodes act as powerful hubs in the network, and manipulating their presence or absence significantly alters the spread of the infection.


**f) With the results of part b) train a model that predicts that time to infection of a node using their degree, centrality, betweeness and page rank. Use that model to select the seed nodes as those with the smallest time to infection in part c). Repeat d)**.
